<login>
    <template if={ this.store.getState().login.isStart }>
        <div class="app-logo">
            <h1>RPP</h1>
            <p>~ロールプレイング風のポートフォリオ~</p>
            <div class="nes-container is-rounded is-dark">
                <ul>
                    <li><a href="javascript:void(0)" onclick={ newGame }>はじめから</a></li>
                    <li><a href="javascript:void(0)" onclick={ continueGame }>つづきから</a></li>
                </ul>
            </div>
        </div> 
    </template>
    <new-game if={ this.store.getState().login.isNewGame }/>
    <continue-game observable={ obs } if={ this.store.getState().login.isContinueGame }/>
    <style>
        :host {
            font-family:'MochiFont' !important;
            height: 100vh;
            margin: 0 auto;
            text-align: center;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #000;
        }
        .nes-container {
            margin-top: 3rem;
        }
        .nes-container ul {
            padding: 0;
        }
        .nes-container li {
            list-style-type: none;
            padding: 1.5rem;
        }
        .nes-container li > a:hover {
            opacity: .5
        }
        .nes-container li > a {
            color: #fff;
        }
        .app-logo h1{
            font-family:'MochiFont' !important;
            font-size: 5rem;
        }
        .app-logo p {
            font-size: 2rem;
        }
        .app-logo {
            color: #fff;
            position: relative;
            padding: 3rem;
            bottom: -80%;
        }
        @media (max-width: 375px) {
            .app-logo {
                width:100%;
            }
        }
    </style>
    <script>
        import anime from 'animejs'
        import UserAPI from '../api/userAPI.js'
        import userDataListAction from '../actions/userDataListAction.js'
        import LoginAction from '../actions/loginAction.js'

        import ContinueGame from '../components/login/continue-game.riot'
        import NewGame from '../components/login/new-game.riot'

        import observable from '@riotjs/observable'
        export default {
            components: {
                ContinueGame,
                NewGame
            },
            onBeforeMount(props, state) {
                //stateの初期化
                this.store.dispatch(LoginAction.reset())
                //ユーザー一覧取得API呼び出し
                UserAPI.getUserList()
                    .then((res) => {
                        const userList = res.data
                        const listItems = this.$$('.nes-container.is-rounded.is-dark ul li')

                        if(userList.length === 0) {
                            //ユーザー情報が1件もなければ「つづきから」を非活性
                            listItems[1].children[0].setAttribute('style', 'pointer-events:none; opacity: .5')
                        } else if(userList.length === 3) {
                            //ユーザー情報が3件既にあれば「はじめから」を非活性
                            listItems[0].children[0].setAttribute('style', 'pointer-events:none; opacity: .5')
                        }
                        //state更新
                        this.store.dispatch(userDataListAction.getUserList(userList))
                    })
                    .catch((err) => {
                        console.log(err)
                    })
                
                //イベント監視用のobservableインスタンスを作成する
                this.obs = observable(this)
                this.obs.on('update parent', () => { this.update() })
            },
            onMounted() {
                anime({
                    targets: '.app-logo',
                    translateY: -600,
                    duration: 10000,
                    easing: 'easeInOutQuad'
                })
            },
            newGame(e) {
              this.store.dispatch(LoginAction.newGame())
              this.update()
            },
            continueGame(e) {
              this.store.dispatch(LoginAction.continueGame())
              this.update()
            }
        }
    </script>
</login>
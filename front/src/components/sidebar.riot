<sidebar>
    <navigation>
        <div class="ui visible sidebar lists inverted  vertical menu ">
            <div class="item sidebar-head">
                <a class="ui logo icon image" href="/user">
                    <i class="user icon"></i>
                </a>
                <a href="/user">
                  { userName }
                </a>
            </div>
            <div class="item">
                <div class="list">
                    <div class="item">
                            <a href="/home">ほーむ</a>
                    </div>
                    <div class="item">
                            <a href="/user">せってい</a>
                    </div>
                    <div class="item">
                            <a href="/status">ステータス</a>
                    </div>
                    <div class="item">
                            <a href="/stage">魔王城にいく</a>
                    </div>
                    <div class="item">
                            <a href="/itemshop"  style="pointer-events:none; opacity: .5;">道具屋</a>
                    </div>
                    <div class="item">
                            <a href="/weaponshop"  style="pointer-events:none; opacity: .5;">武器屋</a>
                    </div>
                    <div class="item">
                            <a href="/jobchange"  style="pointer-events:none; opacity: .5;">ダーマ神殿</a>
                    </div>
                </div>
            </div>
            <div class="item logout">
                <a href="/" onclick={ handleSignout }>
                    ろぐあうと
                </a>
                <a href="/" onclick={ handleSignout }>
                    <i class="sign-out icon"></i>
                </a>
            </div>
        </div>
    </navigation>

    <script>
        import SessionAPI from '../api/sessionAPI'
        export default {
            onBeforeMount(props) {
              //サイドバーにユーザー名を表示する
              props.observable.on('add user name', (name) => {
                this.userName = name
                this.update()
              })
              //イベント検知したら更新する
              props.observable.on('parent update', () => {
                this.userName = this.store.getState().currentUserData.name
                this.update()
              })
              //上記イベントでユーザー名が渡ってくるのはHome画面をマウントした時のみ
              //stateにユーザー名があればセットする
              const currentUser = this.store.getState().currentUserData
              if(Object.keys(currentUser).length !== 0) {
                this.userName = currentUser.name
              }
            },
            handleSignout() {
              //認証情報の初期化
                SessionAPI.signout()
                  .then((res) => {
                    if(res.status === 204) {
                      console.log('サインアウトしました')
                    }
                  })
                  .catch((err) => {
                    console.log(err)
                  })
            }
        }
    </script>

    <style>
        a.icon {
            color: #fff;
        }
        i.user.icon {
            font-size: 3rem;
        }
        .ui.sidebar.menu {
            background: #000;
            border: 2px solid;
            border-color: #fff;
            border-radius: 8px;
            font-family:'MochiFont' !important;
            width: 15%;
            transition: width .2s;
        }
        .sidebar.menu:hover {
            width:16%;
        }
        .list > .item {
            margin: 1.5rem auto;
            font-size: 1rem;
        }
        .list > .item > a {
            text-decoration: none;
        }
        .list > .item > a:hover {
            color: #00b5ad !important;
        }
        .item.sidebar-head > a {
            text-decoration: none;
        }
        .item.sidebar-head > a:hover {
            color: #00b5ad !important;
        }
        .logout > a {
            text-decoration: none;
        }
        .logout > a:hover {
            color: #00b5ad !important;
        }
    </style>
</sidebar>